2, 6, 3, 12, 56, 8

public void sort(int[] arr, int n, int k){
  //create priority queue of size k which will sort the elements in natural order 
  Queue<Integer> queue = new PriorityQueue(k);	

  //insert k elements into queue 
  for(int i = 0; i < k; i++){
     queue.add(arr[i]);
  }
  
  //from k+1 to n check element and replace min element so far to 0th index and so forth.
  index = 0;
  for(int i = k + 1; i < n; i ++){
      arr[index ++] = queue.poll(); //min 
      queue.add(arr[i]);
  }
  //if there are still elements left in queue then use 
  while(!queue.isEmpty()){
   arr[index ++] = queue.poll();
  }
  
}

topkElement(int[] arr, int k){

   Map<Integer,Integer> map = new HashMap();
   for(int i = 0; i < arr.length; i++){
    if(map.containsKey(i)){
	map.put(i, map.get(i) + 1);
     }
    else{
	map.put(i, 1);
     }
   } 

   Queue<Pair> queue = new PriorityQueue<Pair>(k, new MinHeapComparator());
  
   for(Map.Entry<Integer,Integer> entry : map.entrySet()){
    	
	Pair pair = new Pair(entry.getKey(), entry.getValue());
	queue.add(pair);

	if(queue.size > k){
		queue.poll();
	}
	
   }

   List<Integer> result = new ArrayList();
   while(queue.size() > 0){
	result.add(queue.poll().num);
   }
   return result.get(result.size() - 1);
}
class MinHeapComparator implements Comparator{
	@Override
	public int compare(Pair o1, Pair o2){
		return o1.count - o2.count;
	}
}
class Pair{
 int count;
 int num;

 Pair(int count, int num){
	this.count = count;
	this.num = num;
 }
}

