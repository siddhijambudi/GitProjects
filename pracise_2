package com.veeva.multichannel.mccp.engine;

import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;

/**
 * Created by sjambudi on 4/15/2019.
 */
public class SiddhiTest1 {
    private static void removeInvalidParenthesis(String str){
        if(str.isEmpty()){
            return;
        }
        Set<String> visit = new HashSet<>();
        Queue<String> queue = new LinkedList<>();

        String temp;
        boolean level = false;

        queue.add(str);
        visit.add(str);

        while (!queue.isEmpty())
        {
            str = queue.poll();
            if (isValidString(str))
            {
                System.out.println(str);

                // If answer is found, make level true
                // so that valid string of only that level
                // are processed.
                level = true;
            }
            if (level) {
                continue;
            }
            for (int i = 0; i < str.length(); i++)
            {
                if (!isParenthesis(str.charAt(i))){
                    continue;
                }

                // Removing parenthesis from str and
                // pushing into queue,if not visited already
                temp = str.substring(0, i) + str.substring(i + 1);
                if (!visit.contains(temp)) {
                    queue.add(temp);
                    visit.add(temp);
                }
            }
        }
    }

    static boolean isParenthesis(char c) {
        return ((c == '(') || (c == ')'));
    }

    // method returns true if string contains valid
    // parenthesis
    private static boolean isValidString(String str)
    {
        int cnt = 0;
        for (int i = 0; i < str.length(); i++)
        {
            if (str.charAt(i) == '(')
                cnt++;
            else if (str.charAt(i) == ')')
                cnt--;
            if (cnt < 0)
                return false;
        }
        return (cnt == 0);
    }

    // function to merge k sorted linked lists
    public static Node mergeKSortedLists(Node arr[], int k)
    {
        Node head = null, last=null;

        // priority_queue 'pq' implemeted as min heap with the
        // help of 'compare' function
        PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>(){
            public int compare(Node a, Node b)
            {
                return a.data-b.data;
            }
        });

        // push the head nodes of all the k lists in 'pq'
        for (int i = 0; i < k; i++) {
            pq.add(arr[i]);
        }

        // loop till 'pq' is not empty
        while (!pq.isEmpty())
        {
            // get the top element of 'pq'
            Node top = pq.peek();
            pq.remove();

            // check if there is a node next to the 'top' node
            // in the list of which 'top' node is a member
            if (top.next != null)
                // push the next node in 'pq'
                pq.add(top.next);

            // if final merged list is empty
            if (head == null)
            {
                head = top;
                // points to the last node so far of
                // the final merged list
                last = top;
            }
            else
            {
                // insert 'top' at the end of the merged list so far
                last.next = top;
                // update the 'last' pointer
                last = top;
            }
        }
        // head node of the required merged list
        return head;
    }

    // function to print the singly linked list
    public static void printList(Node head)
    {
        while (head != null) {
            System.out.print(head.data+" ");
            head = head.next;
        }
    }

    // Utility function to create a new node
    public Node push(int data)
    {
        Node newNode=new Node(data);
        newNode.next=null;
        return newNode;
    }

    public static void main(String args[]) {
      /*  int k = 3; // Number of linked lists
        int n = 4; // Number of elements in each list

        // an array of pointers storing the head nodes
        // of the linked lists
        Node arr[]=new Node[k];

        arr[0] = new Node(1);
        arr[0].next = new Node(3);
        arr[0].next.next = new Node(5);
        arr[0].next.next.next = new Node(7);

        arr[1] = new Node(2);
        arr[1].next = new Node(4);
        arr[1].next.next = new Node(6);
        arr[1].next.next.next = new Node(8);

        arr[2] = new Node(0);
        arr[2].next = new Node(9);
        arr[2].next.next = new Node(10);
        arr[2].next.next.next = new Node(11);

        // Merge all lists
        Node head = mergeKSortedLists(arr, k);
        printList(head);*/

        String expression = "()())()";
        removeInvalidParenthesis(expression);

        expression = "()v)";
        removeInvalidParenthesis(expression);
    }
}

class Node
{
    int data;
    Node next;
    Node(int data)
    {
        this.data=data;
        next=null;
    }
}
