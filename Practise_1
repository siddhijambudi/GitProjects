import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;

/**
 * Created by sjambudi on 4/15/2019.
 */
public class TestSiddhi {
    public static void main(String args[]){
        /*int[] arr = new int[] {2,6, 3, 12, 56, 8};
        int k = 3;
        int n = arr.length;

        sort(arr, n, k);
        for(int i : arr){
            System.out.print(i + " ");
        }*/

        int[] ar = new int[]{3,2,1,3};
        int result = birthdayCakeCandles(ar);
        System.out.println(result);
    }

    private static void sort(int[] arr, int n, int k){
        Queue<Integer> queue = new PriorityQueue(k, new ReverseComparator());

        //create heap of size k
        for(int i = 0; i < k; i++){
            queue.add(arr[i]);
        }
        //change elements location
        int index = 0;
        for(int i = k; i < n; i++){
            arr[index++] = queue.poll();
            queue.add(arr[i]);
        }
        while(!queue.isEmpty()){
            arr[index ++] = queue.poll();
        }
    }

    // Complete the birthdayCakeCandles function below.
    static int birthdayCakeCandles(int[] ar) {
        //prepare map with number and frequency
        Map<Integer,Integer> arrayMap = new HashMap<>();
        for(int i : ar){
            if(arrayMap.containsKey(i)){
                arrayMap.put(i, arrayMap.get(i) + 1);
            }
            else{
                arrayMap.put(i, 1);
            }
        }

        //create a min heap.
        PriorityQueue<Pair> queue = new PriorityQueue<>(new MinHeap());

        //maintain min heap of size 1
        for(Map.Entry<Integer,Integer> entry : arrayMap.entrySet()){
            Pair pair = new Pair(entry.getKey(), entry.getValue());

            //insert into queue
            queue.offer(pair);

            if(queue.size() > 1){
                queue.poll(); // always poll the min count pair
            }
        }

        List<Integer> result = new ArrayList<>();
        while(queue.size() > 0){
            result.add(queue.poll().num);
        }

        //Collections.reverse(result);
        return arrayMap.get(result.get(0));
    }


}
class MinHeap implements Comparator<Pair> {
    @Override
    public int compare(Pair a, Pair b){
        return a.count - b.count;
    }
}
class Pair{
    public int count;
    public int num;

    public Pair(int num, int count){
        this.count = count;
        this.num = num;
    }
}
class ReverseComparator implements Comparator<Integer>{
    @Override
    public int compare(Integer o1, Integer o2){
        return o2.compareTo(o1);
    }
}
